// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EpochProcessed extends ethereum.Event {
  get params(): EpochProcessed__Params {
    return new EpochProcessed__Params(this);
  }
}

export class EpochProcessed__Params {
  _event: EpochProcessed;

  constructor(event: EpochProcessed) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sharesRequested(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sharesProcessed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountProcessed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LenderAdded extends ethereum.Event {
  get params(): LenderAdded__Params {
    return new LenderAdded__Params(this);
  }
}

export class LenderAdded__Params {
  _event: LenderAdded;

  constructor(event: LenderAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reinvestYield(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class LenderFundDisbursed extends ethereum.Event {
  get params(): LenderFundDisbursed__Params {
    return new LenderFundDisbursed__Params(this);
  }
}

export class LenderFundDisbursed__Params {
  _event: LenderFundDisbursed;

  constructor(event: LenderFundDisbursed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountDisbursed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LenderFundWithdrawn extends ethereum.Event {
  get params(): LenderFundWithdrawn__Params {
    return new LenderFundWithdrawn__Params(this);
  }
}

export class LenderFundWithdrawn__Params {
  _event: LenderFundWithdrawn;

  constructor(event: LenderFundWithdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get numShares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LenderRemoved extends ethereum.Event {
  get params(): LenderRemoved__Params {
    return new LenderRemoved__Params(this);
  }
}

export class LenderRemoved__Params {
  _event: LenderRemoved;

  constructor(event: LenderRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LiquidityDeposited extends ethereum.Event {
  get params(): LiquidityDeposited__Params {
    return new LiquidityDeposited__Params(this);
  }
}

export class LiquidityDeposited__Params {
  _event: LiquidityDeposited;

  constructor(event: LiquidityDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PoolConfigCacheUpdated extends ethereum.Event {
  get params(): PoolConfigCacheUpdated__Params {
    return new PoolConfigCacheUpdated__Params(this);
  }
}

export class PoolConfigCacheUpdated__Params {
  _event: PoolConfigCacheUpdated;

  constructor(event: PoolConfigCacheUpdated) {
    this._event = event;
  }

  get poolConfig(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolConfigChanged extends ethereum.Event {
  get params(): PoolConfigChanged__Params {
    return new PoolConfigChanged__Params(this);
  }
}

export class PoolConfigChanged__Params {
  _event: PoolConfigChanged;

  constructor(event: PoolConfigChanged) {
    this._event = event;
  }

  get newPoolConfig(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldPoolConfig(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RedemptionRequestAdded extends ethereum.Event {
  get params(): RedemptionRequestAdded__Params {
    return new RedemptionRequestAdded__Params(this);
  }
}

export class RedemptionRequestAdded__Params {
  _event: RedemptionRequestAdded;

  constructor(event: RedemptionRequestAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get epochId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RedemptionRequestRemoved extends ethereum.Event {
  get params(): RedemptionRequestRemoved__Params {
    return new RedemptionRequestRemoved__Params(this);
  }
}

export class RedemptionRequestRemoved__Params {
  _event: RedemptionRequestRemoved;

  constructor(event: RedemptionRequestRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get epochId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReinvestYieldConfigSet extends ethereum.Event {
  get params(): ReinvestYieldConfigSet__Params {
    return new ReinvestYieldConfigSet__Params(this);
  }
}

export class ReinvestYieldConfigSet__Params {
  _event: ReinvestYieldConfigSet;

  constructor(event: ReinvestYieldConfigSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reinvestYield(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get by(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class YieldPaidOut extends ethereum.Event {
  get params(): YieldPaidOut__Params {
    return new YieldPaidOut__Params(this);
  }
}

export class YieldPaidOut__Params {
  _event: YieldPaidOut;

  constructor(event: YieldPaidOut) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yields(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class YieldPayoutFailed extends ethereum.Event {
  get params(): YieldPayoutFailed__Params {
    return new YieldPayoutFailed__Params(this);
  }
}

export class YieldPayoutFailed__Params {
  _event: YieldPayoutFailed;

  constructor(event: YieldPayoutFailed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yields(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class YieldReinvested extends ethereum.Event {
  get params(): YieldReinvested__Params {
    return new YieldReinvested__Params(this);
  }
}

export class YieldReinvested__Params {
  _event: YieldReinvested;

  constructor(event: YieldReinvested) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yields(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__depositRecordsResult {
  value0: BigInt;
  value1: boolean;
  value2: BigInt;

  constructor(value0: BigInt, value1: boolean, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPrincipal(): BigInt {
    return this.value0;
  }

  getReinvestYield(): boolean {
    return this.value1;
  }

  getLastDepositTime(): BigInt {
    return this.value2;
  }
}

export class Contract__epochRedemptionSummariesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getEpochId(): BigInt {
    return this.value0;
  }

  getTotalSharesRequested(): BigInt {
    return this.value1;
  }

  getTotalSharesProcessed(): BigInt {
    return this.value2;
  }

  getTotalAmountProcessed(): BigInt {
    return this.value3;
  }
}

export class Contract__epochRedemptionSummaryResultRedemptionSummaryStruct extends ethereum.Tuple {
  get epochId(): BigInt {
    return this[0].toBigInt();
  }

  get totalSharesRequested(): BigInt {
    return this[1].toBigInt();
  }

  get totalSharesProcessed(): BigInt {
    return this[2].toBigInt();
  }

  get totalAmountProcessed(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__lenderRedemptionRecordsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getNextEpochIdToProcess(): BigInt {
    return this.value0;
  }

  getNumSharesRequested(): BigInt {
    return this.value1;
  }

  getPrincipalRequested(): BigInt {
    return this.value2;
  }

  getTotalAmountProcessed(): BigInt {
    return this.value3;
  }

  getTotalAmountWithdrawn(): BigInt {
    return this.value4;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  LENDER_ROLE(): Bytes {
    let result = super.call("LENDER_ROLE", "LENDER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_LENDER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("LENDER_ROLE", "LENDER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calendar(): Address {
    let result = super.call("calendar", "calendar():(address)", []);

    return result[0].toAddress();
  }

  try_calendar(): ethereum.CallResult<Address> {
    let result = super.tryCall("calendar", "calendar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cancellableRedemptionShares(account: Address): BigInt {
    let result = super.call(
      "cancellableRedemptionShares",
      "cancellableRedemptionShares(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_cancellableRedemptionShares(
    account: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cancellableRedemptionShares",
      "cancellableRedemptionShares(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposit(assets: BigInt): BigInt {
    let result = super.call("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);

    return result[0].toBigInt();
  }

  try_deposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositRecords(param0: Address): Contract__depositRecordsResult {
    let result = super.call(
      "depositRecords",
      "depositRecords(address):(uint96,bool,uint64)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new Contract__depositRecordsResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBigInt(),
    );
  }

  try_depositRecords(
    param0: Address,
  ): ethereum.CallResult<Contract__depositRecordsResult> {
    let result = super.tryCall(
      "depositRecords",
      "depositRecords(address):(uint96,bool,uint64)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__depositRecordsResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBigInt(),
      ),
    );
  }

  epochManager(): Address {
    let result = super.call("epochManager", "epochManager():(address)", []);

    return result[0].toAddress();
  }

  try_epochManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("epochManager", "epochManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epochRedemptionSummaries(
    param0: BigInt,
  ): Contract__epochRedemptionSummariesResult {
    let result = super.call(
      "epochRedemptionSummaries",
      "epochRedemptionSummaries(uint256):(uint64,uint96,uint96,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract__epochRedemptionSummariesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_epochRedemptionSummaries(
    param0: BigInt,
  ): ethereum.CallResult<Contract__epochRedemptionSummariesResult> {
    let result = super.tryCall(
      "epochRedemptionSummaries",
      "epochRedemptionSummaries(uint256):(uint64,uint96,uint96,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__epochRedemptionSummariesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  epochRedemptionSummary(
    epochId: BigInt,
  ): Contract__epochRedemptionSummaryResultRedemptionSummaryStruct {
    let result = super.call(
      "epochRedemptionSummary",
      "epochRedemptionSummary(uint256):((uint64,uint96,uint96,uint96))",
      [ethereum.Value.fromUnsignedBigInt(epochId)],
    );

    return changetype<Contract__epochRedemptionSummaryResultRedemptionSummaryStruct>(
      result[0].toTuple(),
    );
  }

  try_epochRedemptionSummary(
    epochId: BigInt,
  ): ethereum.CallResult<Contract__epochRedemptionSummaryResultRedemptionSummaryStruct> {
    let result = super.tryCall(
      "epochRedemptionSummary",
      "epochRedemptionSummary(uint256):((uint64,uint96,uint96,uint96))",
      [ethereum.Value.fromUnsignedBigInt(epochId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__epochRedemptionSummaryResultRedemptionSummaryStruct>(
        value[0].toTuple(),
      ),
    );
  }

  getNonReinvestingLendersLength(): BigInt {
    let result = super.call(
      "getNonReinvestingLendersLength",
      "getNonReinvestingLendersLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getNonReinvestingLendersLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNonReinvestingLendersLength",
      "getNonReinvestingLendersLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lenderRedemptionRecords(
    param0: Address,
  ): Contract__lenderRedemptionRecordsResult {
    let result = super.call(
      "lenderRedemptionRecords",
      "lenderRedemptionRecords(address):(uint64,uint96,uint96,uint96,uint96)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new Contract__lenderRedemptionRecordsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_lenderRedemptionRecords(
    param0: Address,
  ): ethereum.CallResult<Contract__lenderRedemptionRecordsResult> {
    let result = super.tryCall(
      "lenderRedemptionRecords",
      "lenderRedemptionRecords(address):(uint64,uint96,uint96,uint96,uint96)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__lenderRedemptionRecordsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  makeInitialDeposit(assets: BigInt): BigInt {
    let result = super.call(
      "makeInitialDeposit",
      "makeInitialDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_makeInitialDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "makeInitialDeposit",
      "makeInitialDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonReinvestingLenders(param0: BigInt): Address {
    let result = super.call(
      "nonReinvestingLenders",
      "nonReinvestingLenders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_nonReinvestingLenders(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nonReinvestingLenders",
      "nonReinvestingLenders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolConfig(): Address {
    let result = super.call("poolConfig", "poolConfig():(address)", []);

    return result[0].toAddress();
  }

  try_poolConfig(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolConfig", "poolConfig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolSafe(): Address {
    let result = super.call("poolSafe", "poolSafe():(address)", []);

    return result[0].toAddress();
  }

  try_poolSafe(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolSafe", "poolSafe():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAssetsOf(account: Address): BigInt {
    let result = super.call(
      "totalAssetsOf",
      "totalAssetsOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_totalAssetsOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAssetsOf",
      "totalAssetsOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trancheIndex(): i32 {
    let result = super.call("trancheIndex", "trancheIndex():(uint8)", []);

    return result[0].toI32();
  }

  try_trancheIndex(): ethereum.CallResult<i32> {
    let result = super.tryCall("trancheIndex", "trancheIndex():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  transfer(param0: Address, param1: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlyingToken(): Address {
    let result = super.call(
      "underlyingToken",
      "underlyingToken():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_underlyingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingToken",
      "underlyingToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawableAssets(account: Address): BigInt {
    let result = super.call(
      "withdrawableAssets",
      "withdrawableAssets(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_withdrawableAssets(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawableAssets",
      "withdrawableAssets(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddApprovedLenderCall extends ethereum.Call {
  get inputs(): AddApprovedLenderCall__Inputs {
    return new AddApprovedLenderCall__Inputs(this);
  }

  get outputs(): AddApprovedLenderCall__Outputs {
    return new AddApprovedLenderCall__Outputs(this);
  }
}

export class AddApprovedLenderCall__Inputs {
  _call: AddApprovedLenderCall;

  constructor(call: AddApprovedLenderCall) {
    this._call = call;
  }

  get lender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reinvestYield(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddApprovedLenderCall__Outputs {
  _call: AddApprovedLenderCall;

  constructor(call: AddApprovedLenderCall) {
    this._call = call;
  }
}

export class AddRedemptionRequestCall extends ethereum.Call {
  get inputs(): AddRedemptionRequestCall__Inputs {
    return new AddRedemptionRequestCall__Inputs(this);
  }

  get outputs(): AddRedemptionRequestCall__Outputs {
    return new AddRedemptionRequestCall__Outputs(this);
  }
}

export class AddRedemptionRequestCall__Inputs {
  _call: AddRedemptionRequestCall;

  constructor(call: AddRedemptionRequestCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddRedemptionRequestCall__Outputs {
  _call: AddRedemptionRequestCall;

  constructor(call: AddRedemptionRequestCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelRedemptionRequestCall extends ethereum.Call {
  get inputs(): CancelRedemptionRequestCall__Inputs {
    return new CancelRedemptionRequestCall__Inputs(this);
  }

  get outputs(): CancelRedemptionRequestCall__Outputs {
    return new CancelRedemptionRequestCall__Outputs(this);
  }
}

export class CancelRedemptionRequestCall__Inputs {
  _call: CancelRedemptionRequestCall;

  constructor(call: CancelRedemptionRequestCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelRedemptionRequestCall__Outputs {
  _call: CancelRedemptionRequestCall;

  constructor(call: CancelRedemptionRequestCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisburseCall extends ethereum.Call {
  get inputs(): DisburseCall__Inputs {
    return new DisburseCall__Inputs(this);
  }

  get outputs(): DisburseCall__Outputs {
    return new DisburseCall__Outputs(this);
  }
}

export class DisburseCall__Inputs {
  _call: DisburseCall;

  constructor(call: DisburseCall) {
    this._call = call;
  }
}

export class DisburseCall__Outputs {
  _call: DisburseCall;

  constructor(call: DisburseCall) {
    this._call = call;
  }
}

export class ExecuteRedemptionSummaryCall extends ethereum.Call {
  get inputs(): ExecuteRedemptionSummaryCall__Inputs {
    return new ExecuteRedemptionSummaryCall__Inputs(this);
  }

  get outputs(): ExecuteRedemptionSummaryCall__Outputs {
    return new ExecuteRedemptionSummaryCall__Outputs(this);
  }
}

export class ExecuteRedemptionSummaryCall__Inputs {
  _call: ExecuteRedemptionSummaryCall;

  constructor(call: ExecuteRedemptionSummaryCall) {
    this._call = call;
  }

  get summaryProcessed(): ExecuteRedemptionSummaryCallSummaryProcessedStruct {
    return changetype<ExecuteRedemptionSummaryCallSummaryProcessedStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class ExecuteRedemptionSummaryCall__Outputs {
  _call: ExecuteRedemptionSummaryCall;

  constructor(call: ExecuteRedemptionSummaryCall) {
    this._call = call;
  }
}

export class ExecuteRedemptionSummaryCallSummaryProcessedStruct extends ethereum.Tuple {
  get epochId(): BigInt {
    return this[0].toBigInt();
  }

  get totalSharesRequested(): BigInt {
    return this[1].toBigInt();
  }

  get totalSharesProcessed(): BigInt {
    return this[2].toBigInt();
  }

  get totalAmountProcessed(): BigInt {
    return this[3].toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get poolConfig_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get seniorTrancheOrJuniorTranche(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get poolConfig_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class MakeInitialDepositCall extends ethereum.Call {
  get inputs(): MakeInitialDepositCall__Inputs {
    return new MakeInitialDepositCall__Inputs(this);
  }

  get outputs(): MakeInitialDepositCall__Outputs {
    return new MakeInitialDepositCall__Outputs(this);
  }
}

export class MakeInitialDepositCall__Inputs {
  _call: MakeInitialDepositCall;

  constructor(call: MakeInitialDepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MakeInitialDepositCall__Outputs {
  _call: MakeInitialDepositCall;

  constructor(call: MakeInitialDepositCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProcessYieldForLendersCall extends ethereum.Call {
  get inputs(): ProcessYieldForLendersCall__Inputs {
    return new ProcessYieldForLendersCall__Inputs(this);
  }

  get outputs(): ProcessYieldForLendersCall__Outputs {
    return new ProcessYieldForLendersCall__Outputs(this);
  }
}

export class ProcessYieldForLendersCall__Inputs {
  _call: ProcessYieldForLendersCall;

  constructor(call: ProcessYieldForLendersCall) {
    this._call = call;
  }
}

export class ProcessYieldForLendersCall__Outputs {
  _call: ProcessYieldForLendersCall;

  constructor(call: ProcessYieldForLendersCall) {
    this._call = call;
  }
}

export class RemoveApprovedLenderCall extends ethereum.Call {
  get inputs(): RemoveApprovedLenderCall__Inputs {
    return new RemoveApprovedLenderCall__Inputs(this);
  }

  get outputs(): RemoveApprovedLenderCall__Outputs {
    return new RemoveApprovedLenderCall__Outputs(this);
  }
}

export class RemoveApprovedLenderCall__Inputs {
  _call: RemoveApprovedLenderCall;

  constructor(call: RemoveApprovedLenderCall) {
    this._call = call;
  }

  get lender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveApprovedLenderCall__Outputs {
  _call: RemoveApprovedLenderCall;

  constructor(call: RemoveApprovedLenderCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetPoolConfigCall extends ethereum.Call {
  get inputs(): SetPoolConfigCall__Inputs {
    return new SetPoolConfigCall__Inputs(this);
  }

  get outputs(): SetPoolConfigCall__Outputs {
    return new SetPoolConfigCall__Outputs(this);
  }
}

export class SetPoolConfigCall__Inputs {
  _call: SetPoolConfigCall;

  constructor(call: SetPoolConfigCall) {
    this._call = call;
  }

  get poolConfig_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPoolConfigCall__Outputs {
  _call: SetPoolConfigCall;

  constructor(call: SetPoolConfigCall) {
    this._call = call;
  }
}

export class SetReinvestYieldCall extends ethereum.Call {
  get inputs(): SetReinvestYieldCall__Inputs {
    return new SetReinvestYieldCall__Inputs(this);
  }

  get outputs(): SetReinvestYieldCall__Outputs {
    return new SetReinvestYieldCall__Outputs(this);
  }
}

export class SetReinvestYieldCall__Inputs {
  _call: SetReinvestYieldCall;

  constructor(call: SetReinvestYieldCall) {
    this._call = call;
  }

  get lender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reinvestYield(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetReinvestYieldCall__Outputs {
  _call: SetReinvestYieldCall;

  constructor(call: SetReinvestYieldCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdatePoolConfigDataCall extends ethereum.Call {
  get inputs(): UpdatePoolConfigDataCall__Inputs {
    return new UpdatePoolConfigDataCall__Inputs(this);
  }

  get outputs(): UpdatePoolConfigDataCall__Outputs {
    return new UpdatePoolConfigDataCall__Outputs(this);
  }
}

export class UpdatePoolConfigDataCall__Inputs {
  _call: UpdatePoolConfigDataCall;

  constructor(call: UpdatePoolConfigDataCall) {
    this._call = call;
  }
}

export class UpdatePoolConfigDataCall__Outputs {
  _call: UpdatePoolConfigDataCall;

  constructor(call: UpdatePoolConfigDataCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawAfterPoolClosureCall extends ethereum.Call {
  get inputs(): WithdrawAfterPoolClosureCall__Inputs {
    return new WithdrawAfterPoolClosureCall__Inputs(this);
  }

  get outputs(): WithdrawAfterPoolClosureCall__Outputs {
    return new WithdrawAfterPoolClosureCall__Outputs(this);
  }
}

export class WithdrawAfterPoolClosureCall__Inputs {
  _call: WithdrawAfterPoolClosureCall;

  constructor(call: WithdrawAfterPoolClosureCall) {
    this._call = call;
  }
}

export class WithdrawAfterPoolClosureCall__Outputs {
  _call: WithdrawAfterPoolClosureCall;

  constructor(call: WithdrawAfterPoolClosureCall) {
    this._call = call;
  }
}
